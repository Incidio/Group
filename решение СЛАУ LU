{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "3W0CTfLn6dvK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3 align=\"left\"> Лабораторная работа № 1</h3>\n",
        "<h3 align=\"left\"> Реализовать алгоритм LU -  разложения матриц (с выбором главного элемента) в виде программы.  </h3>\n",
        "<h3 align=\"left\"> Используя разработанное программное обеспечение, решить систему линейных алгебраических уравнений (СЛАУ). </h3>\n",
        "<h3 align=\"left\"> Для матрицы СЛАУ вычислить определитель и обратную матрицу.</h3>\n",
        "<h3 align=\"left\"> Найти решение системы, обратную матрицу и определитель, воспользовавшись одним из стандартных математических пакетов: MathCad, MathLab и т. п. Сравнить результаты. </h3>\n",
        "<br>\n",
        "<h3 align=\"left\"> Вариант 14 </h3>\n",
        "\n",
        "\\begin{equation*}\n",
        "\\begin{cases}\n",
        "-x_1-3x_2-4x_3=-3 \\\\\n",
        "3x_1+7x_2-8x_3+3x_4=30 \\\\\n",
        "x_1-6x_2+2x_3+5x_4=-90\\\\\n",
        "-8x_1-4x_2-x_3-x_4=12\n",
        "\\end{cases}\n",
        "\\end{equation*}\n"
      ],
      "metadata": {
        "id": "7-JjAZlp5VWK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "A = np.array([[-1, 1, -4, 0],    # матрица коэффициентов\n",
        "              [3, 7, -8, 3],\n",
        "              [1, -6, 2, 5],\n",
        "              [-8, -4, -1, -1]], dtype=float)\n",
        "\n",
        "b = np.array([-3, 30, -90, 12], dtype=float)    # вектор правой части"
      ],
      "metadata": {
        "id": "OxXYPCoPWVji"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Существование LU разложения\n",
        "\n",
        "# Вычисление определителя матрицы через рекурсию\n",
        "def manual_det(matrix):\n",
        "\n",
        "    n = matrix.shape[0]\n",
        "\n",
        "    # Случаи для 1х1 и 2х2\n",
        "    if n == 1:\n",
        "        return matrix[0, 0]\n",
        "    elif n == 2:\n",
        "        return matrix[0, 0] * matrix[1, 1] - matrix[0, 1] * matrix[1, 0]\n",
        "\n",
        "    det = 0\n",
        "    for j in range(n):\n",
        "        # Создаем минор (n-1) х (n-1)\n",
        "        minor = np.zeros((n-1, n-1))\n",
        "\n",
        "        # Заполняем минор, исключая первую строку и j-тый столбец\n",
        "        row_idx = 0\n",
        "        for i in range(1, n):\n",
        "            col_idx = 0\n",
        "            for k in range(n):\n",
        "                if k != j:\n",
        "                    minor[row_idx, col_idx] = matrix[i, k]\n",
        "                    col_idx += 1\n",
        "            row_idx += 1\n",
        "\n",
        "        # Рекурсивно вычисляем определитель минора\n",
        "        minor_det = manual_det(minor)\n",
        "        det += ((-1) ** j) * matrix[0, j] * minor_det\n",
        "\n",
        "    return det\n",
        "\n",
        "# Все угловые миноры должны быть не нулевыми\n",
        "def minors_check(matrix):\n",
        "\n",
        "    n = matrix.shape[0]\n",
        "    all_nonzero = True\n",
        "\n",
        "    for order in range(1, n + 1):\n",
        "        # Создаем подматрицу\n",
        "        submatrix = matrix[:order, :order]\n",
        "\n",
        "        # Вычисляем определитель\n",
        "        det = manual_det(submatrix)\n",
        "\n",
        "        print(f\"Минор:\")\n",
        "        print(submatrix)\n",
        "        print(f\"Определитель: {det:.2f}\")\n",
        "\n",
        "        if abs(det) < 1e-10:\n",
        "            print(\"Определитель равен нулю\")\n",
        "            all_nonzero = False\n",
        "        else:\n",
        "            print(\"Определитель не равен нулю\")\n",
        "        print(\"-\" * 30)\n",
        "\n",
        "    return all_nonzero\n",
        "\n",
        "\n",
        "result = minors_check(A)\n",
        "print(f\"Все главные миноры не равны нулю: {result}\")\n",
        "\"\"\"\n",
        "Следовательно разложение A = LxU существует\n",
        "\"\"\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "w2BvSwMuh1ZL",
        "outputId": "db9f6271-0af0-4dc1-d82b-0faca60bbfda"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Минор:\n",
            "[[-1.]]\n",
            "Определитель: -1.00\n",
            "Определитель не равен нулю\n",
            "------------------------------\n",
            "Минор:\n",
            "[[-1.  1.]\n",
            " [ 3.  7.]]\n",
            "Определитель: -10.00\n",
            "Определитель не равен нулю\n",
            "------------------------------\n",
            "Минор:\n",
            "[[-1.  1. -4.]\n",
            " [ 3.  7. -8.]\n",
            " [ 1. -6.  2.]]\n",
            "Определитель: 120.00\n",
            "Определитель не равен нулю\n",
            "------------------------------\n",
            "Минор:\n",
            "[[-1.  1. -4.  0.]\n",
            " [ 3.  7. -8.  3.]\n",
            " [ 1. -6.  2.  5.]\n",
            " [-8. -4. -1. -1.]]\n",
            "Определитель: 767.00\n",
            "Определитель не равен нулю\n",
            "------------------------------\n",
            "Все главные миноры не равны нулю: True\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nСледовательно разложение A = LxU существует\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Вычисление матриц L и U\n",
        "\n",
        "def decompose_to_LU(a):\n",
        "\n",
        "    n = a.shape[0]\n",
        "    lu_matrix = np.zeros([n, n])\n",
        "\n",
        "    for k in range(n):\n",
        "        # calculate all residual k-row elements\n",
        "        for j in range(k, n):\n",
        "            # Исправляем: правильно вычисляем сумму произведений\n",
        "            sum_val = 0.0\n",
        "            for m in range(k):\n",
        "                sum_val += lu_matrix[k, m] * lu_matrix[m, j]\n",
        "            lu_matrix[k, j] = a[k, j] - sum_val\n",
        "\n",
        "        # calculate all residual k-column elements\n",
        "        for i in range(k + 1, n):\n",
        "            sum_val = 0.0\n",
        "            for m in range(k):\n",
        "                sum_val += lu_matrix[i, m] * lu_matrix[m, k]\n",
        "            lu_matrix[i, k] = (a[i, k] - sum_val) / lu_matrix[k, k]\n",
        "\n",
        "    return lu_matrix\n",
        "\n",
        "def get_L(m):\n",
        "    L = m.copy()\n",
        "    for i in range(L.shape[0]):\n",
        "            L[i, i] = 1\n",
        "            L[i, i+1 :] = 0\n",
        "    return np.matrix(L)\n",
        "\n",
        "\n",
        "def get_U(m):\n",
        "    U = m.copy()\n",
        "    for i in range(1, U.shape[0]):\n",
        "        U[i, :i] = 0\n",
        "    return U\n",
        "\n",
        "\n",
        "LU = decompose_to_LU(A)\n",
        "L = get_L(LU)\n",
        "U = get_U(LU)\n",
        "\n",
        "print(\"\\nНижняя треугольная матрица L:\")\n",
        "print(L)\n",
        "\n",
        "print(\"\\nВерхняя треугольная матрица U:\")\n",
        "print(U)"
      ],
      "metadata": {
        "id": "-0jyIU72WVl_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b61331b5-6a52-4b9e-9310-819b39ba6773"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Нижняя треугольная матрица L:\n",
            "[[ 1.          0.          0.          0.        ]\n",
            " [-3.          1.          0.          0.        ]\n",
            " [-1.         -0.5         1.          0.        ]\n",
            " [ 8.         -1.2        -0.58333333  1.        ]]\n",
            "\n",
            "Верхняя треугольная матрица U:\n",
            "[[ -1.           1.          -4.           0.        ]\n",
            " [  0.          10.         -20.           3.        ]\n",
            " [  0.           0.         -12.           6.5       ]\n",
            " [  0.           0.           0.           6.39166667]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Проверка\n",
        "\n",
        "# Проверка корректности LU-разложения\n",
        "print(\"Проверка LU-разложения\")\n",
        "\n",
        "LU = L @ U  # L * U\n",
        "print(\"L * U =\")\n",
        "print(LU)\n",
        "print(\"A =\")\n",
        "print(A)\n",
        "print(\"Разница L*U - A:\")\n",
        "print(LU - A)\n",
        "print(\"Максимальная абсолютная погрешность:\", np.max(np.abs(LU - A)))\n",
        "\n",
        "np.allclose(L @ U, A, rtol=1e-05, atol=1e-08)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "57cSKKqjBoV-",
        "outputId": "4e716d86-bfaa-4240-f540-58480a12b7f4"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Проверка LU-разложения\n",
            "L * U =\n",
            "[[-1.  1. -4.  0.]\n",
            " [ 3.  7. -8.  3.]\n",
            " [ 1. -6.  2.  5.]\n",
            " [-8. -4. -1. -1.]]\n",
            "A =\n",
            "[[-1.  1. -4.  0.]\n",
            " [ 3.  7. -8.  3.]\n",
            " [ 1. -6.  2.  5.]\n",
            " [-8. -4. -1. -1.]]\n",
            "Разница L*U - A:\n",
            "[[0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
            " [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
            " [0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
            " [0.0000000e+00 4.4408921e-16 4.4408921e-16 0.0000000e+00]]\n",
            "Максимальная абсолютная погрешность: 4.440892098500626e-16\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Решение СЛАУ\n",
        "\n",
        "def support_vector_z(L, b):\n",
        "    \"\"\"\n",
        "    Прямая подстановка: решаем систему Lz = b\n",
        "    L - нижняя треугольная матрица с единицами на диагонали\n",
        "    b - вектор правой части\n",
        "    возвращает вспомогательный вектор z\n",
        "    \"\"\"\n",
        "    n = L.shape[0]\n",
        "    z = np.zeros(n)\n",
        "\n",
        "    # z₁ = b₁\n",
        "    z[0] = b[0]\n",
        "\n",
        "    # z_i = b_i - ∑(l_ij * z_j), j=1..i-1, i=2..n\n",
        "    for i in range(1, n):\n",
        "        sum_val = 0.0\n",
        "        for j in range(i):\n",
        "            sum_val += L[i, j] * z[j]\n",
        "        z[i] = b[i] - sum_val\n",
        "\n",
        "    return z\n",
        "\n",
        "def solving_vector(U, z):\n",
        "    \"\"\"\n",
        "    Обратная подстановка: решаем систему Ux = z\n",
        "    U - верхняя треугольная матрица\n",
        "    z - вспомогательный вектор\n",
        "    возвращает вектор x\n",
        "    \"\"\"\n",
        "    n = U.shape[0]\n",
        "    x = np.zeros(n)\n",
        "\n",
        "    # x_n = z_n / u_nn\n",
        "    x[n-1] = z[n-1] / U[n-1, n-1]\n",
        "\n",
        "    # x_i = (z_i - ∑(u_ij * x_j)) / u_ii, j=i+1..n, i=n-1..1\n",
        "    for i in range(n-2, -1, -1):\n",
        "        sum_val = 0.0\n",
        "        for j in range(i+1, n):\n",
        "            sum_val += U[i, j] * x[j]\n",
        "        x[i] = (z[i] - sum_val) / U[i, i]\n",
        "\n",
        "    return x\n",
        "\n",
        "def solve_lu(A, b):\n",
        "    \"\"\"\n",
        "    Решение СЛАУ Ax = b методом LU-разложения\n",
        "    \"\"\"\n",
        "    # LU-разложение\n",
        "    LU = decompose_to_LU(A)\n",
        "    L = get_L(LU)\n",
        "    U = get_U(LU)\n",
        "\n",
        "    # Прямая подстановка: Lz = b\n",
        "    z = support_vector_z(L, b)\n",
        "\n",
        "    # Обратная подстановка: Ux = z\n",
        "    x = solving_vector(U, z)\n",
        "\n",
        "    return x, L, U, z"
      ],
      "metadata": {
        "id": "skI7eXbeBof8"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Анализ результатов\n",
        "\n",
        "print(\"Реализация алгоритма LU -  разложения матриц в виде программы\")\n",
        "\n",
        "print(\"Матрица A:\")\n",
        "print(A)\n",
        "print(\"\\nВектор b:\", b)\n",
        "\n",
        "# Решение системы\n",
        "x, L, U, z = solve_lu(A, b)\n",
        "\n",
        "print(\"\")\n",
        "\n",
        "print(\"Результаты разложения\")\n",
        "\n",
        "print(\"\\nВектор z (решение системы Lz = b):\\n\")\n",
        "print(z)\n",
        "\n",
        "print(\" \")\n",
        "\n",
        "print(\"Решение\")\n",
        "print(\" \")\n",
        "\n",
        "#print(f\"x[0].4f, \" \", x[1], \")\n",
        "print(f\"x1 = {x[0]:.2f}, x2 = {x[1]:.2f}, x3 = {x[2]:.2f}, x4 = {x[3]:.2f}\")\n",
        "\n",
        "print(\" \")\n",
        "\n",
        "# Проверка решения\n",
        "print(\"Проверка решения\")\n",
        "print(\" \")\n",
        "\n",
        "Ax = A @ x\n",
        "print(\"A * x =\", Ax)\n",
        "print(\"b     =\", b)\n",
        "\n",
        "print(\"Максимальная абсолютная погрешность:\", np.max(np.abs(Ax - b)))\n",
        "print(\" \")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FR5r8mk5G4Z2",
        "outputId": "d786b690-a4a0-4fcc-c428-63a99576f494"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Реализация алгоритма LU -  разложения матриц в виде программы\n",
            "Матрица A:\n",
            "[[-1.  1. -4.  0.]\n",
            " [ 3.  7. -8.  3.]\n",
            " [ 1. -6.  2.  5.]\n",
            " [-8. -4. -1. -1.]]\n",
            "\n",
            "Вектор b: [ -3.  30. -90.  12.]\n",
            "\n",
            "Результаты разложения\n",
            "\n",
            "Вектор z (решение системы Lz = b):\n",
            "\n",
            "[ -3.     21.    -82.5    13.075]\n",
            " \n",
            "Решение\n",
            " \n",
            "x1 = -11.48, x2 = 17.45, x3 = 7.98, x4 = 2.05\n",
            " \n",
            "Проверка решения\n",
            " \n",
            "A * x = [ -3.  30. -90.  12.]\n",
            "b     = [ -3.  30. -90.  12.]\n",
            "Максимальная абсолютная погрешность: 1.4210854715202004e-14\n",
            " \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def determinant_from_LU(U):\n",
        "    det = 1.0\n",
        "    n = U.shape[0]\n",
        "    for i in range(n):\n",
        "        det *= U[i, i]\n",
        "    return det\n",
        "\n",
        "def inverse_from_LU(a):\n",
        "    n = a.shape[0]\n",
        "\n",
        "    # Получаем компактную LU-матрицу\n",
        "    lu_matrix = decompose_to_LU(a)\n",
        "\n",
        "    # Извлекаем L и U\n",
        "    L = get_L(lu_matrix)\n",
        "    U = get_U(lu_matrix)\n",
        "\n",
        "    A_inv = np.zeros((n, n))\n",
        "    I = np.eye(n)\n",
        "\n",
        "    for i in range(n):\n",
        "        e = I[:, i]\n",
        "        z = support_vector_z(L, e)\n",
        "        x = solve_lu(U, z)[0]\n",
        "        A_inv[:, i] = x.ravel()\n",
        "\n",
        "    return A_inv\n",
        "\n",
        "# Вычисление определителя\n",
        "det_A = determinant_from_LU(U)\n",
        "print(\"определитель A:\")\n",
        "print(det_A)\n",
        "\n",
        "# Проверка с помощью NumPy\n",
        "det_numpy = np.linalg.det(A)\n",
        "print(\"определитель (с помощью numpy) A: \")\n",
        "print(det_numpy)\n",
        "\n",
        "print(f\"Разница: {abs(det_A - det_numpy):.2e}\")\n",
        "\n",
        "# Вычисление обратной матрицы\n",
        "print(\"Обратная матрица\")\n",
        "print(A)\n",
        "\n",
        "A_inv = inverse_from_LU(A)\n",
        "print(A_inv)\n",
        "\n",
        "A_numpy = np.linalg.inv(A)\n",
        "print(\"Обратная матрица A^{-1}:\")\n",
        "print(A_numpy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dy3r-ezoXAY2",
        "outputId": "3674f76f-5a39-4dd6-a1b2-6e2a5de241b2"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "определитель A:\n",
            "767.0\n",
            "определитель (с помощью numpy) A: \n",
            "766.9999999999999\n",
            "Разница: 1.14e-13\n",
            "Обратная матрица\n",
            "[[-1.  1. -4.  0.]\n",
            " [ 3.  7. -8.  3.]\n",
            " [ 1. -6.  2.  5.]\n",
            " [-8. -4. -1. -1.]]\n",
            "[[ 0.35332464 -0.13950456  0.04041721 -0.21642764]\n",
            " [-0.47718383  0.19947849 -0.09517601  0.12255541]\n",
            " [-0.45762712  0.08474576 -0.03389831  0.08474576]\n",
            " [-0.46023468  0.23337679  0.09126467  0.15645372]]\n",
            "Обратная матрица A^{-1}:\n",
            "[[ 0.35332464 -0.13950456  0.04041721 -0.21642764]\n",
            " [-0.47718383  0.19947849 -0.09517601  0.12255541]\n",
            " [-0.45762712  0.08474576 -0.03389831  0.08474576]\n",
            " [-0.46023468  0.23337679  0.09126467  0.15645372]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Сравнение результатов со стандартным пакетом\n",
        "\n",
        "# Решение системы\n",
        "x_lu = np.linalg.solve(A, b)\n",
        "#print(x_lu)\n",
        "print(f\"Решение: x1 = {x_lu[0]:.2f}, x2 = {x_lu[1]:.2f}, x3 = {x_lu[2]:.2f}, x4 = {x_lu[3]:.2f}\")\n",
        "\n",
        "np.allclose(x, x_lu, rtol=1e-05, atol=1e-08)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K6e4gxJnftU1",
        "outputId": "c2b47e31-92b5-4ac5-e96a-75ca93ab0b02"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Решение: x1 = -11.48, x2 = 17.45, x3 = 7.98, x4 = 2.05\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    }
  ]
}
